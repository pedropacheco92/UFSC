package model.gals;

public interface ParserConstants
{
    int START_SYMBOL = 66;

    int FIRST_NON_TERMINAL    = 66;
    int FIRST_SEMANTIC_ACTION = 93;

    int[][] PARSER_TABLE =
    {
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1, -1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  2,  2, -1,  2,  2,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  7,  8, -1,  4,  6,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, 63, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 13, -1, -1, -1, -1, 12, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, 20, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, 25, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, 24, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, 30, 29, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, -1, -1, 33, -1, -1, -1, -1, -1, 33, 33, 33, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, 33, 33, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, 42, -1, -1, -1, -1, -1, 42, 42, 42, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, 42, 42, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 34, 34, 34, 34, 34, -1, -1, -1, -1, 34, 35, -1, 35, -1, 35, 35, -1, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 38, 37, 40, 39, 41, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, 48, -1, -1, -1, -1, -1, 48, 48, 48, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, 48, 48, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 44, 44, 44, 44, 44, -1, -1, -1, -1, 44, 44, -1, 44, -1, 44, 44, -1, 44, 43, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, 44, 44, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, 56, -1, -1, -1, -1, -1, 58, 59, 59, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 59, 59, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 50, 50, 50, 50, 50, -1, -1, -1, -1, 50, 50, -1, 50, -1, 50, 50, -1, 50, 50, 50, 49, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, 50, 50, -1, -1, -1, -1, 50, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53 },
        { -1, -1, 61, 61, 61, 61, 61, -1, -1, -1, -1, 61, 61, 60, 61, -1, 61, 61, -1, 61, 61, 61, 61, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, 61, 61, -1, -1, -1, -1, 61, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, 65, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, 67, -1, -1, -1, -1, -1, -1, -1 }
    };

    int[][] PRODUCTIONS = 
    {
        {  32,  28, 194,  13,  67,  25 },
        {  68,  69 },
        {  70,  71, 195,  72,  73, 196,  13,  68 },
        {   0 },
        {  39, 197 },
        {  41, 198 },
        {  40, 199 },
        {  36, 200 },
        {  37,  14,  74, 201,  15 },
        { 202,  14,  74, 203,  15 },
        { 204 },
        {  28, 205,  75 },
        {  18,  72 },
        {   0 },
        {  12,  74, 206 },
        { 207 },
        {  16,  76,  77,  17 },
        {  13,  76,  77 },
        {   0 },
        {  28, 208,  78 },
        {  69 },
        {  46,  79, 209,  47,  76,  80 },
        {  59,  79, 209,  49,  76 },
        {  52,  19, 210,  72,  20 },
        {  64,  19,  79, 211,  81,  20 },
        {   0 },
        {  48,  76 },
        {   0 },
        { 212,  11,  79, 213 },
        {  14, 214,  79, 215,  15,  11,  79, 213 },
        {   0 },
        {  18,  79, 220,  81 },
        {   0 },
        {  82, 221,  83 },
        {  84,  82, 222 },
        {   0 },
        {  12, 223 },
        {   4, 224 },
        {   3, 225 },
        {   6, 226 },
        {   5, 227 },
        {   7, 227 },
        {  85, 228,  86 },
        {  87, 229,  85, 230,  86 },
        {   0 },
        {  21, 231 },
        {  22, 232 },
        {  54, 233 },
        {  88, 234,  89 },
        {  90, 235,  88, 236,  89 },
        {   0 },
        {  23, 237 },
        {  24, 238 },
        {  65, 239 },
        {  55, 240 },
        {  56, 241,  88, 242 },
        {  22, 243,  88, 244 },
        {  19, 245,  79,  20, 246 },
        {  28, 208,  91, 247 },
        {  92, 248 },
        {  14, 214,  79, 249,  15 },
        { 250 },
        {  28, 251 },
        {  92 },
        {  29, 252 },
        {  30, 253 },
        {  57, 254 },
        {  58, 255 },
        {  31, 256 }
    };

    String[] PARSER_ERROR =
    {
        "",
        "Era esperado fim de programa",
        "Era esperado \"<-\"",
        "Era esperado \">\"",
        "Era esperado \"<\"",
        "Era esperado \"<=\"",
        "Era esperado \">=\"",
        "Era esperado \"<>\"",
        "Era esperado \"!=\"",
        "Era esperado \"^\"",
        "Era esperado \"::\"",
        "Era esperado \":=\"",
        "Era esperado \"=\"",
        "Era esperado \";\"",
        "Era esperado \"[\"",
        "Era esperado \"]\"",
        "Era esperado \"{\"",
        "Era esperado \"}\"",
        "Era esperado \",\"",
        "Era esperado \"(\"",
        "Era esperado \")\"",
        "Era esperado \"+\"",
        "Era esperado \"-\"",
        "Era esperado \"*\"",
        "Era esperado \"/\"",
        "Era esperado \".\"",
        "Era esperado \":\"",
        "Era esperado \"..\"",
        "Era esperado id",
        "Era esperado num_int",
        "Era esperado num_real",
        "Era esperado literal",
        "Era esperado programa",
        "Era esperado decl",
        "Era esperado fim",
        "Era esperado inicio",
        "Era esperado caracter",
        "Era esperado cadeia",
        "Era esperado const",
        "Era esperado inteiro",
        "Era esperado booleano",
        "Era esperado real",
        "Era esperado de",
        "Era esperado vetor",
        "Era esperado procedimento",
        "Era esperado funcao",
        "Era esperado se",
        "Era esperado entao",
        "Era esperado senao",
        "Era esperado faca",
        "Era esperado repita",
        "Era esperado ate",
        "Era esperado leia",
        "Era esperado escreve",
        "Era esperado ou",
        "Era esperado e",
        "Era esperado nao",
        "Era esperado falso",
        "Era esperado verdadeiro",
        "Era esperado enquanto",
        "Era esperado proc",
        "Era esperado ref",
        "Era esperado val",
        "Era esperado intervalo",
        "Era esperado escreva",
        "Era esperado div",
        "<programa> inválido",
        "<bloco> inválido",
        "<dcl_var_const> inválido",
        "<com_composto> inválido",
        "<tipo> inválido",
        "<dimensao> inválido",
        "<lid> inválido",
        "<fator_const> inválido",
        "<constante> inválido",
        "<rep_lid> inválido",
        "<comando> inválido",
        "<replistacomando> inválido",
        "<rcomid> inválido",
        "<expressao> inválido",
        "<senaoparte> inválido",
        "<rep_lexpr> inválido",
        "<expsimp> inválido",
        "<resto_expressao> inválido",
        "<oprel> inválido",
        "<termo> inválido",
        "<rep_expsimp> inválido",
        "<op_add> inválido",
        "<fator> inválido",
        "<rep_termo> inválido",
        "<op_mult> inválido",
        "<rvar> inválido",
        "<constante_explicita> inválido"
    };
}
